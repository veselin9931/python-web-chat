import chainlit as cl
from llama_cpp import Llama
import time
import asyncio

MODEL_PATH = "./models/bggpt-gemma-2-2.6b-it-v1.0-q8_0.gguf"
# MODEL_PATH = "./models/BgGPT-Gemma-2-27B-IT-v1.0.i1-IQ1_S.gguf"
# MODEL_PATH = "./models/BgGPT-Gemma-2-9B-IT-v1.0.i1-Q4_K_S.gguf"

try:
    llm = Llama(
        model_path=MODEL_PATH,
        n_ctx=2048,
        n_batch=512,
        verbose=True,
    )
except Exception as e:
    print(f"Model lo ading error: {e}")
    llm = None

@cl.on_chat_start
async def start():
    if llm is None:
        await cl.Message(content="‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ø—ä—Ç—è –¥–æ –º–æ–¥–µ–ª–∞.").send()
    else:
        await cl.Message(content="ü§ñ –ú–æ–¥–µ–ª—ä—Ç –µ –≥–æ—Ç–æ–≤!").send()
        await cl.Message(content="üëã –î–æ–±—Ä–µ –¥–æ—à—ä–ª –≤ —á–∞—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –£–Ω–∏–∫—Ä–µ–¥–∏—Ç –ë—É–ª–±–∞–Ω–∫! –° –∫–∞–∫–≤–æ –¥–∞ –ø–æ–º–æ–≥–Ω–∞?", ).send()




async def update_timer(message):
    start_time = time.time()
    while True:
        elapsed_time = time.time() - start_time
        await message.update(content=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä... ")
        await asyncio.sleep(0.1)

@cl.on_message
async def main(message: cl.Message):
    if llm is None:
        await cl.Message(content="–ú–æ–¥–µ–ª—ä—Ç –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω. –ù–µ –º–æ–≥–∞ –¥–∞ –æ–±—Ä–∞–±–æ—Ç—è –∑–∞—è–≤–∫–∞—Ç–∞ –≤–∏.").send()
        return

    # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
    msg = cl.Message(content=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä...")
    await msg.send()

    try:
        start_time = time.time()
        
        output = await asyncio.to_thread(
            llm,
            prompt=f"\n### Q:\n{message.content}\n### A:\n",
            max_tokens=500,  # –£–≤–µ–ª–∏—á–µ–Ω –±—Ä–æ–π tokens
            stop=["\n", "###"],
            echo=False
        )
        

        response = output["choices"][0]["text"].strip()
        elapsed_time = time.time() - start_time
        
        print(f"{response}\n\n‚è±Ô∏è –í—Ä–µ–º–µ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥–∏")

        # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –¥–∞ –æ–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ä–æ—Ç–æ
        await cl.Message(content=f"{response}\n\n‚è±Ô∏è –í—Ä–µ–º–µ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥–∏").send()
        
        # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
        await msg.remove()
        
    except Exception as e:
        await msg.remove()
        await cl.Message(content=f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä: {e}").send()